---
format:
  html:
    code-fold: true
execute:
  echo: false
jupyter: python3
---

# Options Trading Strategies and Hedging

::: {.callout-note}
# References

- HULL, John. Options, futures, and other derivatives. Ninth edition. Harlow: Pearson, 2018. ISBN 978-1-292-21289-0.
    - Chapter 12 - Trading Strategies Involving Options
- PIRIE, Wendy L. Derivatives. Hoboken: Wiley, 2017. CFA institute investment series. ISBN 978-1-119-38181-5.
    - Chapter 5 - Derivatives Strategies
:::

Additonal sources on option trading strategies:

- [tastylive](https://www.tastylive.com/concepts-strategies/10-options-strategies-every-trader-should-know)
- [options playbook](https://www.optionsplaybook.com/option-strategies/)
- [investopedia](https://www.investopedia.com/trading/options-strategies/)

**Learning Outcomes:**

- Understand the structure and purpose of Principal Protected Notes, including how they
safeguard the principal amount while offering potential investment gains.
- Analyze strategies that combine positions in the underlying asset with options to
manage risk and enhance potential returns, focusing on protective puts and covered
calls.
- Explore various option spread strategies, such as bull spreads, bear spreads, calendar
spreads, and butterfly spreads, to understand their risk/reward profiles and market
outlook implications.
- Examine option combination strategies like straddles, strangles, strips, and straps,
highlighting their use in volatile markets to capitalize on significant price movements
in either direction.

```{python}
# Load python libraries
import plotly.graph_objects as go
import numpy as np
```


## Principal Protected Note

Principal Protected Note (PPN) allow investors to participate in high-reward
opportunities while safeguarding their principal. This is achieved through a combination
of a zero-coupon bond and a derivative, typically a call option.

:::{.callout-note}
# Example: PPN Structure

Consider a \$1,000 PPN structured as follows:

1. **Zero-Coupon Bond Component**: A 3-year zero-coupon bond with a face value of
\$1,000 ensures principal protection. Assuming a continuously compounded interest rate
of 6%, its present value is:  
$$
PV = 1,000 \times e^{-0.06 \times 3} = 835.27
$$
This confirms that an initial investment of \$835.27 will grow to \$1,000 in 3 years,
ensuring capital protection.

2. **Call Option Component**: The remaining \$164.73 (\$1,000 - \$835.27) is used to buy
a 3-year at-the-money call option on a stock portfolio, providing upside potential.
:::

Key Factors Affecting PPN Feasibility:

- **Dividends**: High dividend yields reduce the appeal of the call option component.  
- **Interest Rates**: Higher rates lower the cost of the zero-coupon bond, making
principal protection cheaper.  
- **Volatility**: Increased volatility raises the option price but enhances upside
potential.  

PPNs can be tailored to different investor needs through:  

- **Strike Price Adjustments**: Setting options out of the money for higher potential
returns.  
- **Return Caps**: Imposing limits on maximum gains to reduce option costs.  
- **Structural Features**: Incorporating knock-outs, averaging mechanisms, and other
innovations to refine risk-return profiles.  

## Combining Underlying and Options  

Integrating stock positions with options allows for customized risk/reward profiles
suited to different market views. Two key strategies illustrating this approach are the
**protective put** and **covered call**.  

### Protective Put  

A **protective put** involves holding a stock while purchasing a put option on the same
stock. This strategy:  

- **Protects against downside risk** by setting a minimum selling price (the putâ€™s
strike price).  
- **Preserves upside potential**, as gains are uncapped beyond the strike price.  

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Parameters for the protective put strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
S0 = 100  # Initial stock price
K = 100  # Strike price of the put option
premium_put = 5  # Premium paid for the put option
initial_investment = S0 + premium_put  # Total initial investment including the put premium

# Profit calculations for protective put
stock_profit = spot_prices - S0  # Profit from the stock alone
put_option_profit = np.maximum(K - spot_prices, 0) - premium_put  # Profit from the long put option
protective_put_profit = stock_profit + put_option_profit  # Total profit from the protective put strategy

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual components' profits
plt.plot(spot_prices, stock_profit, linestyle='dotted', linewidth=2, label="Stock Profit")
plt.plot(spot_prices, put_option_profit, linestyle='dotted', linewidth=2, label="Put Option Profit")

# Plot the protective put net profit
plt.plot(spot_prices, protective_put_profit, linewidth=3, label="Protective Put", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Protective Put Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Covered Call  

A **covered call** involves owning a stock and selling a call option on it. This
strategy:  

- **Generates income** from the option premium, boosting returns in flat or slightly
bullish markets.  
- **Limits upside potential** to the call's strike price but provides partial downside
protection through premium income.  

```{python}
# Parameters for the covered call strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
S0 = 100  # Initial stock price
K = 100  # Strike price of the call option
premium_call = 5  # Premium received for the call option

# Profit calculations for covered call
stock_profit = spot_prices - S0  # Profit from the stock alone
call_option_profit = np.where(spot_prices > K, K - spot_prices, 0) + premium_call  # Profit from the short call option
covered_call_profit = stock_profit + call_option_profit  # Total profit from the covered call strategy

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual components' profits
plt.plot(spot_prices, stock_profit, linestyle='dotted', linewidth=2, label="Stock Profit")
plt.plot(spot_prices, call_option_profit, linestyle='dotted', linewidth=2, label="Call Option Profit")

# Plot the covered call net profit
plt.plot(spot_prices, covered_call_profit, linewidth=3, label="Covered Call", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Covered Call Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

## Option Spreads  

Option spreads involve holding multiple options of the same type to structure
risk/reward profiles based on market expectations. These strategies range from bullish
to bearish or neutral.  

### Bull Spread  

A **bull spread** profits from a moderate price increase and can be constructed using
calls or puts.  

#### Call Bull Spread  

- **Position**: Buy a call at a lower strike price, sell a call at a higher strike price
(same expiration).  
- **Profit**: Limited to the difference between strike prices minus the net premium paid.  
- **Risk**: Limited to the net premium paid.  
- **Break-even**: Lower strike price + net premium paid.  

```{python}
# Parameters for the bull spread strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 95  # Strike price of the long call option
K2 = 105  # Strike price of the short call option
premium_long = 5  # Premium paid for the long call
premium_short = 2  # Premium received for the short call

# Profit calculations
long_call_profit = np.maximum(spot_prices - K1, 0) - premium_long
short_call_profit = -(np.maximum(spot_prices - K2, 0) - premium_short)
bull_spread_profit = long_call_profit + short_call_profit  # Net profit of the bull spread

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, long_call_profit, linestyle='dotted', linewidth=2, label="Long Call")
plt.plot(spot_prices, short_call_profit, linestyle='dotted', linewidth=2, label="Short Call")

# Plot the bull spread net profit
plt.plot(spot_prices, bull_spread_profit, linewidth=3, label="Bull Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Bull Spread Using Call Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

#### Put Bull Spread  

- **Position**: Buy a put at a higher strike price, sell a put at a lower strike price
(same expiration).  
- **Profit**: Limited to the difference between strike prices minus the net premium paid.  
- **Risk**: Limited to the net premium paid.  
- **Break-even**: Higher strike price - net premium paid.  

```{python}
# Parameters for the bull spread strategy using put options
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 95  # Strike price of the long put option (lower strike)
K2 = 105  # Strike price of the short put option (higher strike)
premium_long = 2  # Premium paid for the long put
premium_short = 5  # Premium received for the short put

# Profit calculations
long_put_profit = np.maximum(K1 - spot_prices, 0) - premium_long
short_put_profit = -(np.maximum(K2 - spot_prices, 0) - premium_short)
bull_spread_profit = long_put_profit + short_put_profit  # Net profit of the bull spread using put options

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, long_put_profit, linestyle='dotted', linewidth=2, label="Long Put")
plt.plot(spot_prices, short_put_profit, linestyle='dotted', linewidth=2, label="Short Put")

# Plot the bull spread net profit
plt.plot(spot_prices, bull_spread_profit, linewidth=3, label="Bull Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Bull Spread Using Put Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Bear Spread  

A **bear spread** profits from a moderate price decline and can also be constructed
using calls or puts.  

#### Call Bear Spread  

- **Position**: Buy a call at a higher strike price, sell a call at a lower strike price
(same expiration).  
- **Profit**: Limited to the net premium received.  
- **Risk**: Limited to the difference between strike prices minus the net premium
received.  
- **Break-even**: Lower strike price + net premium received.  

```{python}
# Parameters for the bear spread strategy using call options
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 90  # Strike price of the short call option (lower strike)
K2 = 105  # Strike price of the long call option (higher strike)
premium_short = 5  # Premium received for the short call
premium_long = 2  # Premium paid for the long call

# Profit calculations for bear spread using call options
short_call_profit = -(np.maximum(spot_prices - K1, 0) - premium_short)
long_call_profit = np.maximum(spot_prices - K2, 0) - premium_long
bear_spread_profit = short_call_profit + long_call_profit  # Net profit of the bear spread

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, short_call_profit, linestyle='dotted', linewidth=2, label="Short Call")
plt.plot(spot_prices, long_call_profit, linestyle='dotted', linewidth=2, label="Long Call")

# Plot the bear spread net profit
plt.plot(spot_prices, bear_spread_profit, linewidth=3, label="Bear Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Bear Spread Using Call Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

#### Put Bear Spread  

- **Position**: Buy a put at a higher strike price, sell a put at a lower strike price
(same expiration).  
- **Profit**: Limited to the net premium received.  
- **Risk**: Limited to the difference between strike prices minus the net premium
received.  
- **Break-even**: Higher strike price - net premium received.  

```{python}
# Parameters for the bear spread strategy using put options
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 105  # Strike price of the long put option (higher strike)
K2 = 95  # Strike price of the short put option (lower strike)
premium_long = 5  # Premium paid for the long put
premium_short = 2  # Premium received for the short put

# Profit calculations for bear spread using put options
long_put_profit = np.maximum(K1 - spot_prices, 0) - premium_long
short_put_profit = -(np.maximum(K2 - spot_prices, 0) - premium_short)
bear_spread_profit = long_put_profit + short_put_profit  # Net profit of the bear spread

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, long_put_profit, linestyle='dotted', linewidth=2, label="Long Put")
plt.plot(spot_prices, short_put_profit, linestyle='dotted', linewidth=2, label="Short Put")

# Plot the bear spread net profit
plt.plot(spot_prices, bear_spread_profit, linewidth=3, label="Bear Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Bear Spread Using Put Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Butterfly Spread  

A **butterfly spread** is a neutral strategy used when minimal price movement is
expected. It involves three strike prices and can be structured with calls or puts.  

#### Call Butterfly Spread  

- **Position**:  
  - Buy 1 call at a lower strike price (A).  
  - Sell 2 calls at a middle strike price (B).  
  - Buy 1 call at a higher strike price (C).  
  - All options share the same expiration and have equidistant strike prices.  
- **Profit**: Maximum when the underlying price equals the middle strike price at
expiration.  
- **Risk**: Limited to the net premium paid.  
- **Break-even points**:  
  - Lower: $A + \text{net premium paid}$  
  - Upper: $C - \text{net premium paid}$  

```{python}
# Parameters for the butterfly spread strategy using call options
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 95  # Strike price of the first long call option (lower strike)
K2 = 100  # Strike price of the short call options (middle strike)
K3 = 105  # Strike price of the second long call option (higher strike)
premium_long1 = 8  # Premium paid for the first long call
premium_short = 5  # Premium received for each short call (twice for the middle strike)
premium_long2 = 4  # Premium paid for the second long call

# Profit calculations for butterfly spread using call options
long_call1_profit = np.maximum(spot_prices - K1, 0) - premium_long1
short_call_profit = 2 * (-(np.maximum(spot_prices - K2, 0) - premium_short))
long_call2_profit = np.maximum(spot_prices - K3, 0) - premium_long2
butterfly_spread_profit = long_call1_profit + short_call_profit + long_call2_profit  # Net profit of the butterfly spread

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, long_call1_profit, linestyle='dotted', linewidth=2, label="Long Call 1")
plt.plot(spot_prices, short_call_profit, linestyle='dotted', linewidth=2, label="Short Call (2x)")
plt.plot(spot_prices, long_call2_profit, linestyle='dotted', linewidth=2, label="Long Call 2")

# Plot the butterfly spread net profit
plt.plot(spot_prices, butterfly_spread_profit, linewidth=3, label="Butterfly Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Butterfly Spread Using Call Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

#### Put Butterfly Spread  

- **Position**:  
  - Buy 1 put at a higher strike price (A).  
  - Sell 2 puts at a middle strike price (B).  
  - Buy 1 put at a lower strike price (C).  
  - Same expiration and equidistant strikes.  
- **Profit/Risk**: Similar to the call butterfly spread.  
- **Break-even points**: Identical to the call butterfly but adjusted for put strike
prices.  

```{python}
# Parameters for the butterfly spread strategy using put options
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K1 = 105  # Strike price of the first long put option (higher strike)
K2 = 100  # Strike price of the short put options (middle strike)
K3 = 95  # Strike price of the second long put option (lower strike)
premium_long1 = 8  # Premium paid for the first long put
premium_short = 5  # Premium received for each short put (twice for the middle strike)
premium_long2 = 4  # Premium paid for the second long put

# Profit calculations for butterfly spread using put options
long_put1_profit = np.maximum(K1 - spot_prices, 0) - premium_long1
short_put_profit = 2 * (-(np.maximum(K2 - spot_prices, 0) - premium_short))
long_put2_profit = np.maximum(K3 - spot_prices, 0) - premium_long2
butterfly_spread_profit = long_put1_profit + short_put_profit + long_put2_profit  # Net profit of the butterfly spread

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, long_put1_profit, linestyle='dotted', linewidth=2, label="Long Put 1")
plt.plot(spot_prices, short_put_profit, linestyle='dotted', linewidth=2, label="Short Put (2x)")
plt.plot(spot_prices, long_put2_profit, linestyle='dotted', linewidth=2, label="Long Put 2")

# Plot the butterfly spread net profit
plt.plot(spot_prices, butterfly_spread_profit, linewidth=3, label="Butterfly Spread", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Butterfly Spread Using Put Options")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Key Features of Option Spreads  

- **Market Outlook**: Bull spreads suit moderate price increases, bear spreads fit
moderate declines, and butterfly spreads work best in stable markets.  
- **Risk & Reward**: Bull and bear spreads offer defined risk and reward, while
butterfly spreads provide a high reward-to-risk ratio in low-volatility conditions.  
- **Cost Efficiency**: Spreads are often more cost-effective than outright option
positions.  
- **Flexibility**: Investors can adjust spread width and strike prices to tailor risk
exposure.  

:::{.callout-tip}
# Calendar Spreads  

**Calendar spreads** (also called time or horizontal spreads) involve options with the
same underlying and strike price but **different expiration dates**. They capitalize on
differences in time decay (theta). A typical calendar spread consists of selling a
short-term option and buying a longer-term option of the same type (call or put).  

For more details, see [tastylive](https://www.tastylive.com/concepts-strategies/calendar-spread).  
:::  

## Option Combinations  

Option combinations involve two or more options of different types, allowing traders to
express complex market views and hedge risks beyond single-option positions. Key
strategies include **straddles, strangles, strips, and straps**.  

### Straddles  

A **straddle** consists of buying or selling both a **call and a put** with the **same
strike price** and expiration.  

#### Long Straddle  

- **Buy a call and a put** at the same strike price.  
- Profits from **high volatility**, regardless of direction.  
- **Max loss**: Total premium paid.  
- **Max profit**: Unlimited if the asset moves significantly.  

```{python}
# Parameters for the long straddle strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K = 100  # Strike price for both the call and put options
premium_call = 5  # Premium paid for the call option
premium_put = 5  # Premium paid for the put option

# Profit calculations for long straddle
call_profit = np.maximum(spot_prices - K, 0) - premium_call
put_profit = np.maximum(K - spot_prices, 0) - premium_put
long_straddle_profit = call_profit + put_profit  # Net profit of the long straddle

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, call_profit, linestyle='dotted', linewidth=2, label="Call Option")
plt.plot(spot_prices, put_profit, linestyle='dotted', linewidth=2, label="Put Option")

# Plot the long straddle net profit
plt.plot(spot_prices, long_straddle_profit, linewidth=3, label="Long Straddle", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Long Straddle Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

#### Short Straddle  

- **Sell a call and a put** at the same strike price.  
- Profits from **low volatility**, expecting price stability.  
- **Max profit**: Premiums received.  
- **Max risk**: Unlimited if the asset moves significantly.  

```{python}
# Parameters for the short straddle strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K = 100  # Strike price for both the call and put options
premium_call = 5  # Premium received for the call option
premium_put = 5  # Premium received for the put option

# Profit calculations for short straddle
call_profit = np.minimum(K - spot_prices, 0) + premium_call
put_profit = np.minimum(spot_prices - K, 0) + premium_put
short_straddle_profit = call_profit + put_profit  # Net profit of the short straddle

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, call_profit, linestyle='dotted', linewidth=2, label="Call Option")
plt.plot(spot_prices, put_profit, linestyle='dotted', linewidth=2, label="Put Option")

# Plot the short straddle net profit
plt.plot(spot_prices, short_straddle_profit, linewidth=3, label="Short Straddle", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Short Straddle Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Strangles  

A **strangle** is similar to a straddle but uses **different strike prices** (call
strike > put strike).  

#### Long Strangle  

- **Buy an OTM call and an OTM put**.  
- Cheaper than a straddle but requires a larger price move to profit.  
- **Max loss**: Total premium paid.  
- **Max profit**: Unlimited on large price moves.  

```{python}
# Parameters for the long strangle strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K_call = 105  # Strike price of the call option (higher strike)
K_put = 95  # Strike price of the put option (lower strike)
premium_call = 2  # Premium paid for the call option
premium_put = 2  # Premium paid for the put option

# Profit calculations for long strangle
call_profit = np.maximum(spot_prices - K_call, 0) - premium_call
put_profit = np.maximum(K_put - spot_prices, 0) - premium_put
long_strangle_profit = call_profit + put_profit  # Net profit of the long strangle

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, call_profit, linestyle='dotted', linewidth=2, label="Call Option")
plt.plot(spot_prices, put_profit, linestyle='dotted', linewidth=2, label="Put Option")

# Plot the long strangle net profit
plt.plot(spot_prices, long_strangle_profit, linewidth=3, label="Long Strangle", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Long Strangle Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

#### Short Strangle  

- **Sell an OTM call and an OTM put**.  
- Profits from **low volatility and time decay**.  
- **Max profit**: Premiums received.  
- **Max risk**: Large if the asset moves significantly.  

```{python}
# Parameters for the short strangle strategy
spot_prices = np.linspace(80, 120, 100)  # Range of spot prices
K_call = 105  # Strike price of the call option (higher strike)
K_put = 95  # Strike price of the put option (lower strike)
premium_call = 2  # Premium received for the call option
premium_put = 2  # Premium received for the put option

# Profit calculations for short strangle
call_profit = np.minimum(K_call - spot_prices, 0) + premium_call
put_profit = np.minimum(spot_prices - K_put, 0) + premium_put
short_strangle_profit = call_profit + put_profit  # Net profit of the short strangle

# Create the figure
plt.figure(figsize=(8, 6))

# Plot the individual option profits
plt.plot(spot_prices, call_profit, linestyle='dotted', linewidth=2, label="Call Option")
plt.plot(spot_prices, put_profit, linestyle='dotted', linewidth=2, label="Put Option")

# Plot the short strangle net profit
plt.plot(spot_prices, short_strangle_profit, linewidth=3, label="Short Strangle", color='black')

# Horizontal line at profit = 0 for reference
plt.axhline(y=0, color='gray', linestyle='dashed')

# Labels and title
plt.title("Short Strangle Strategy")
plt.xlabel("Spot Price at Expiration")
plt.ylabel("Profit")
plt.legend()

# Show the plot
plt.show()
```

### Strips and Straps  

These are variations of the **straddle**, introducing a directional bias while still
benefiting from volatility.  

- **Strip** (Bearish bias): **Buy 1 call and 2 puts** at the same strike price. More
profitable if the price drops.  
- **Strap** (Bullish bias): **Buy 2 calls and 1 put** at the same strike price. More
profitable if the price rises.  

### Key Characteristics  

- **Volatility Sensitivity**: Long positions (straddles, strangles, strips, straps)
**benefit from increased volatility**, while short positions profit from **low
volatility**.  
- **Directional Bias**: Straddles and strangles are **neutral**, while strips and straps
have a **directional tilt**.  
- **Risk & Reward**:  
  - **Long** positions: Limited risk (premium paid), unlimited reward.  
  - **Short** positions: Limited profit, significant risk if the price moves sharply.  
- **Breakeven Points**:  
  - Each strategy has **two breakeven points**, requiring significant price movement for
  profitability in long strategies.  

## Practice Questions and Problems

1. What is meant by a protective put? What position in call options is equivalent to a
protective put?

2. Explain two ways in which a bear spread can be created.

3. When is it appropriate for an investor to purchase a butterfly spread?

4. What trading strategy creates a reverse calendar spread?

5. What is the difference between a strangle and a straddle?

6. A call option with a strike price of \$50 costs \$2. A put option with a strike price
of \$45 costs \$3. Explain how a strangle can be created from these two options. What is
the pattern of profits from the strangle?

7. Explain how an aggressive bear spread can be created using put options.

8. Suppose that put options on a stock with strike prices \$30 and \$35 cost \$4 and
\$7, respectively. How can the options be used to create (a) a bull spread and (b) a
bear spread? Draw and explain profit/loss.

9. An investor believes that there will be a big jump in a stock price, but is uncertain
as to the direction. Identify six different strategies the investor can follow and
explain the differences among them.